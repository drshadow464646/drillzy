-- This script sets up the Supabase database for the SkillTrack app,
-- migrating from localStorage to a persistent database backend.

-- 1. Create category enum type
drop type if exists public.category cascade;
create type public.category as enum ('builder', 'creator', 'thinker', 'connector');

-- 2. Create profiles table
-- This table stores user-specific public data.
create table public.profiles (
  id uuid not null references auth.users on delete cascade,
  name text,
  category public.category,
  streak_count integer not null default 0,
  primary key (id)
);
comment on table public.profiles is 'Profile data for each user, including their current streak.';

-- 3. Set up Row Level Security (RLS) for profiles
alter table public.profiles enable row level security;

create policy "Users can view their own profile."
  on public.profiles for select
  using (auth.uid() = id);

create policy "Users can insert their own profile."
  on public.profiles for insert
  with check (auth.uid() = id);

create policy "Users can update their own profile."
  on public.profiles for update
  using (auth.uid() = id);

-- 4. Create skill_history table
-- This table tracks daily skills and completion status for each user.
create table public.skill_history (
  id bigint generated by default as identity,
  user_id uuid not null references public.profiles on delete cascade,
  date date not null,
  skill_id text not null,
  completed boolean not null default false,
  primary key (id),
  unique(user_id, date)
);
comment on table public.skill_history is 'Tracks the daily skills assigned to users.';

-- 5. Set up RLS for skill_history
alter table public.skill_history enable row level security;

create policy "Users can manage their own skill history."
  on public.skill_history for all
  using (auth.uid() = user_id)
  with check (auth.uid() = user_id);

-- 6. Create survey_answers table
-- This table stores the answers from the initial user survey.
create table public.survey_answers (
  id bigint generated by default as identity,
  user_id uuid not null references public.profiles on delete cascade,
  question_id int not null,
  category public.category not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  primary key (id)
);
comment on table public.survey_answers is 'Stores user responses to the onboarding survey.';

-- 7. Set up RLS for survey_answers
alter table public.survey_answers enable row level security;

create policy "Users can manage their own survey answers."
  on public.survey_answers for all
  using (auth.uid() = user_id)
  with check (auth.uid() = user_id);

-- 8. Create function to handle new user
-- This function automatically creates a profile for new users upon signup.
create or replace function public.handle_new_user()
returns trigger
language plpgsql
security definer set search_path = public
as $$
begin
  insert into public.profiles (id, name)
  values (new.id, new.raw_user_meta_data->>'name');
  return new;
end;
$$;

-- 9. Create trigger to call function on new user signup
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

-- 10. Create function to update streak count
-- This function calculates the user's streak based on their skill history.
create or replace function public.update_streak()
returns trigger
language plpgsql
as $$
declare
  streak integer;
begin
  with history as (
    select
      date,
      lag(date, 1) over (order by date) as prev_date
    from
      public.skill_history
    where
      user_id = new.user_id and completed = true
  )
  select
    count(*)
  into
    streak
  from
    history
  where
    date = (select max(date) from history) and (date - prev_date = 1 or prev_date is null);

  update public.profiles
  set streak_count = streak
  where id = new.user_id;

  return new;
end;
$$;

-- 11. Create trigger to update streak on skill completion
create trigger on_skill_history_change
  after insert or update of completed on public.skill_history
  for each row
  when (new.completed = true)
  execute procedure public.update_streak();
