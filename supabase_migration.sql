-- Supabase Migration Script for SkillTrack App
-- This script sets up the necessary tables, relationships, and security policies
-- to migrate the app's data structure from localStorage to a Supabase database.

-- 1. TABLES
-- =============================================

-- Profiles Table
-- Stores user-specific information, linked to Supabase's built-in auth.
create table public.profiles (
  id uuid not null references auth.users on delete cascade,
  name text,
  category text,
  streak_count integer not null default 0,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null,

  primary key (id)
);
-- Add a comment to the table.
comment on table public.profiles is 'Profile data for each user.';

-- Skill History Table
-- Tracks each skill a user has been assigned and whether they completed it.

-- Add a comment to the table.
comment on table public.skill_history is 'Tracks the daily skills assigned to users.';


-- Survey Answers Table
-- Stores the user's answers to the initial survey.
create table public.survey_answers (
  id bigint generated by default as identity,
  user_id uuid not null references public.profiles on delete cascade,
  question_id integer not null,
  category text not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,

  primary key (id)
);
-- Add a comment to the table.
comment on table public.survey_answers is 'Stores user responses to the onboarding survey.';


-- 2. ROW LEVEL SECURITY (RLS) POLICIES
-- =============================================
-- These policies ensure that users can only access their own data.

-- Enable RLS for all tables
alter table public.profiles enable row level security;
alter table public.skill_history enable row level security;
alter table public.survey_answers enable row level security;

-- Policies for `profiles` table
create policy "Public profiles are viewable by authenticated users." on public.profiles
  for select to authenticated using (true);

create policy "Users can insert their own profile." on public.profiles
  for insert to authenticated with check (auth.uid() = id);

create policy "Users can update their own profile." on public.profiles
  for update to authenticated using (auth.uid() = id);

-- Policies for `skill_history` table
create policy "Users can view their own skill history." on public.skill_history
  for select to authenticated using (auth.uid() = user_id);

create policy "Users can insert their own skill history." on public.skill_history
  for insert to authenticated with check (auth.uid() = user_id);

create policy "Users can update their own skill history." on public.skill_history
  for update to authenticated using (auth.uid() = user_id);

-- Policies for `survey_answers` table
create policy "Users can view their own survey answers." on public.survey_answers
  for select to authenticated using (auth.uid() = user_id);

create policy "Users can insert their own survey answers." on public.survey_answers
  for insert to authenticated with check (auth.uid() = user_id);


-- 3. TRIGGERS
-- =============================================
-- This function and trigger automatically create a new profile
-- entry whenever a new user signs up in Supabase Auth.

create function public.handle_new_user()
returns trigger as $$
begin
  insert into public.profiles (id)
  values (new.id);
  return new;
end;
$$ language plpgsql security definer;

create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

-- END OF SCRIPT
